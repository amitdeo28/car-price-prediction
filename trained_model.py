# -*- coding: utf-8 -*-
"""Project 1.Car price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15B0Ojt-v7THkshtj9RKVcRFTVm92OSvL

## importing library
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""## Data collection and Processing"""

car_dataset = pd.read_csv('car data.csv')

car_dataset.head()

# checking the number of rows and column
car_dataset.shape

# getting some information about dataset
car_dataset.info()

# checkimg the missing values in the dataset
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""## Encoding the categorical data"""

# encoding "Fuel_type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0, 'Diesel':1, 'CNG':2}}, inplace = True)

# encoding "Seller_Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0, 'Individual':1}}, inplace = True)

# encoding "Transmission" column
car_dataset.replace({'Transmission':{'Manual':0, 'Automatic':1}}, inplace = True)

car_dataset.head()

"""## Splitting the Data and Target

"""

X = car_dataset.drop(['Car_Name', 'Selling_Price'], axis=1)
Y = car_dataset['Selling_Price']

print(X)

print(Y)

"""## Splitting into Training data and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 2)

"""## Model Training

1.Linear Regression
"""

# Loading linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train, Y_train)

"""## Model Evalation

"""

# Prediction on Training data
training_data_prediction = lin_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error:", error_score)

"""## Visualize Actual prices and Predicted prices"""

plt.scatter(Y_train,training_data_prediction, color = 'red')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

import numpy as np

x_line = np.linspace(min(Y_train), max(Y_train), 100)
y_line = x_line  # y = x for the diagonal line

# Scatter plot with diagonal line
plt.scatter(Y_train, training_data_prediction, color='red', label='Actual vs Predicted')
plt.plot(x_line, y_line, color='blue', linestyle='--', label='Diagonal Line')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices with Diagonal Line")
plt.legend()
plt.show()

# Prediction on Test data
test_data_prediction = lin_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error:", error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

car_dataset.head()

"""## Predict the price for the new car"""

import numpy as np
new_car_features = np.array([[2020, 6.85, 99000, 0, 1, 0, 0]])  # Year, Present_Price, Kms_Driven, Fuel_Type, Seller_Type, Transmission, Owner

# Predict the price for the new car
predicted_price = lin_reg_model.predict(new_car_features)

print("Predicted Price for the New Car:", predicted_price)

import pickle

pickle.dump(lin_reg_model, open('lin_reg_model.pkl', 'wb'))